var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var proto_view_1 = require('angular2/src/render/dom/view/proto_view');
var api_1 = require('angular2/src/render/api');
var template_cloner_1 = require('angular2/src/render/dom/template_cloner');
var util_1 = require('angular2/src/render/dom/util');
var dom_adapter_1 = require('angular2/src/dom/dom_adapter');
var view_node_1 = require('nativescript-angular/view_node');
var NativeScriptView = (function () {
    function NativeScriptView(proto, rootChildElements, boundElements) {
        this.proto = proto;
        this.rootChildElements = rootChildElements;
        this.boundElements = boundElements;
    }
    NativeScriptView.prototype.getBoundNode = function (index) {
        return this.boundElements[index];
    };
    return NativeScriptView;
})();
exports.NativeScriptView = NativeScriptView;
var NativeScriptViewRef = (function (_super) {
    __extends(NativeScriptViewRef, _super);
    function NativeScriptViewRef(view) {
        _super.call(this);
        this._view = view;
    }
    NativeScriptViewRef.prototype.resolveView = function () {
        return this._view;
    };
    return NativeScriptViewRef;
})(api_1.RenderViewRef);
exports.NativeScriptViewRef = NativeScriptViewRef;
var NativeScriptFragmentRef = (function (_super) {
    __extends(NativeScriptFragmentRef, _super);
    function NativeScriptFragmentRef(nodes) {
        _super.call(this);
        this.nodes = nodes;
    }
    NativeScriptFragmentRef.prototype.resolveNodes = function () {
        return this.nodes;
    };
    return NativeScriptFragmentRef;
})(api_1.RenderFragmentRef);
exports.NativeScriptFragmentRef = NativeScriptFragmentRef;
var NativeScriptRenderer = (function (_super) {
    __extends(NativeScriptRenderer, _super);
    function NativeScriptRenderer(_templateCloner) {
        _super.call(this);
        this._templateCloner = _templateCloner;
        console.log('NativeScriptRenderer created');
    }
    NativeScriptRenderer.prototype.createRootHostView = function (hostProtoViewRef, fragmentCount, hostElementSelector) {
        console.log("NativeScriptRenderer.createRootHostView");
        var hostProtoView = proto_view_1.resolveInternalDomProtoView(hostProtoViewRef);
        //return new NativeScriptViewRef(this._createView(hostProtoView, null, true));
        return this._createView(hostProtoView, null, true);
    };
    NativeScriptRenderer.prototype.detachFreeHostView = function (parentHostViewRef, hostViewRef) {
        console.log("NativeScriptRenderer.detachFreeHostView");
    };
    NativeScriptRenderer.prototype.createView = function (protoViewRef, fragmentCount) {
        console.log("NativeScriptRenderer.createView");
        var protoView = proto_view_1.resolveInternalDomProtoView(protoViewRef);
        //return new NativeScriptViewRef(this._createView(protoView, null, false));
        return this._createView(protoView, null, false);
    };
    NativeScriptRenderer.prototype.destroyView = function (viewRef) {
        console.log("NativeScriptRenderer.destroyView");
        // Seems to be called on component dispose only (router outlet)
        //TODO: handle this when we resolve routing and navigation.
    };
    NativeScriptRenderer.prototype.attachFragmentAfterFragment = function (previousFragmentRef, fragmentRef) {
        console.log("NativeScriptRenderer.attachFragmentAfterFragment");
        var previousFragmentNodes = previousFragmentRef.resolveNodes();
        var lastNode = previousFragmentNodes[previousFragmentNodes.length - 1];
        var fragmentNodes = fragmentRef.resolveNodes();
        this.attachFragmentAfter(lastNode, fragmentNodes);
    };
    NativeScriptRenderer.prototype.attachFragmentAfterElement = function (location, fragmentRef) {
        console.log("NativeScriptRenderer.attachFragmentAfterElement");
        var hostView = location.renderView.resolveView();
        var startNode = hostView.getBoundNode(location.renderBoundElementIndex);
        var fragmentNodes = fragmentRef.resolveNodes();
        this.attachFragmentAfter(startNode, fragmentNodes);
    };
    NativeScriptRenderer.prototype.attachFragmentAfter = function (anchorNode, fragmentNodes) {
        var startIndex = anchorNode.parentNode.getChildIndex(anchorNode) + 1;
        fragmentNodes.forEach(function (node, index) {
            console.log('attachFragmentAfterElement: child: ' + node.viewName + ' after: ' + anchorNode.viewName + ' startIndex: ' + startIndex + ' index: ' + index);
            anchorNode.parentNode.insertChildAt(startIndex + index, node);
            node.attachToView(startIndex + index);
        });
    };
    NativeScriptRenderer.prototype.detachFragment = function (fragmentRef) {
        //TODO: implement...
        console.log('NativeScriptRenderer.detachFragment');
        var fragmentNodes = fragmentRef.resolveNodes();
        fragmentNodes.forEach(function (node) {
            console.log('detaching fragment child: ' + node.viewName);
            if (node.parentNode)
                node.parentNode.removeChild(node);
        });
    };
    NativeScriptRenderer.prototype.hydrateView = function (viewRef) {
        console.log("NativeScriptRenderer.hydrateView ");
        //DOING nothing -- the view init code happens on attach: ViewNode#createUI
    };
    NativeScriptRenderer.prototype.dehydrateView = function (viewRef) {
        console.log("NativeScriptRenderer.dehydrateView");
        //TODO: detach events
    };
    NativeScriptRenderer.prototype.setElementProperty = function (location, propertyName, propertyValue) {
        console.log("NativeScriptRenderer.setElementProperty " + propertyName + " = " + propertyValue);
        var view = location.renderView.resolveView();
        var node = view.getBoundNode(location.renderBoundElementIndex);
        node.setProperty(propertyName, propertyValue);
    };
    NativeScriptRenderer.prototype.setElementAttribute = function (location, attributeName, attributeValue) {
        console.log("NativeScriptRenderer.setElementAttribute " + attributeName + " = " + attributeValue);
        return this.setElementProperty(location, attributeName, attributeValue);
    };
    NativeScriptRenderer.prototype.setElementClass = function (location, className, isAdd) {
        console.log("NativeScriptRenderer.setElementClass " + className + " - " + isAdd);
        var view = location.renderView.resolveView();
        var node = view.getBoundNode(location.renderBoundElementIndex);
        if (isAdd) {
            node.addClass(className);
        }
        else {
            node.removeClass(className);
        }
    };
    NativeScriptRenderer.prototype.getNativeElementSync = function (location) {
        console.log("NativeScriptRenderer.getNativeElementSync");
        var view = location.renderView.resolveView();
        var node = view.getBoundNode(location.renderBoundElementIndex);
        return node.nativeView;
    };
    /**
    * Calls a method on an element.
    */
    NativeScriptRenderer.prototype.invokeElementMethod = function (location, methodName, args) {
        console.log("NativeScriptRenderer.invokeElementMethod " + methodName + " " + args);
    };
    NativeScriptRenderer.prototype.setText = function (viewRef, textNodeIndex, text) {
        console.log("NativeScriptRenderer.setText ");
    };
    NativeScriptRenderer.prototype.setEventDispatcher = function (viewRef, dispatcher) {
        console.log("NativeScriptRenderer.setEventDispatcher ");
        var view = viewRef.resolveView();
        view.eventDispatcher = dispatcher;
    };
    NativeScriptRenderer.prototype._createView = function (proto, inplaceElement, isRoot) {
        if (isRoot === void 0) { isRoot = false; }
        console.log("NativeScriptRenderer._createView ");
        var clonedProtoView = util_1.cloneAndQueryProtoView(this._templateCloner, proto, true);
        var nativeElements;
        var boundElements = [];
        var templateRoot = clonedProtoView.fragments[0][0];
        nativeElements = this._createNodes(null, [templateRoot], boundElements);
        if (isRoot) {
            nativeElements[0].attachToView();
        }
        var view = new NativeScriptView(proto, nativeElements, boundElements);
        var binders = proto.elementBinders;
        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
            var binder = binders[binderIdx];
            var viewNode = boundElements[binderIdx];
            // events
            if (binder.eventLocals != null && binder.localEvents != null) {
                for (var i = 0; i < binder.localEvents.length; i++) {
                    viewNode.createEventListener(view, binderIdx, binder.localEvents[i].name, binder.eventLocals);
                }
            }
        }
        var fragments = clonedProtoView.fragments.map(function (nodes) {
            console.log('Fragment with nodes: ' + nodes.length + ' first: ' + nodes[0].name);
            return new NativeScriptFragmentRef(nativeElements);
        });
        return new api_1.RenderViewWithFragments(new NativeScriptViewRef(view), fragments);
    };
    NativeScriptRenderer.prototype._createNodes = function (parent, parsedChildren, boundElements) {
        var _this = this;
        console.log('NativeScriptRenderer._createNodes ' + (parent ? parent.viewName : 'NULL'));
        var viewNodes = [];
        parsedChildren.forEach(function (node) {
            var viewNode;
            if (node.type == "tag") {
                viewNode = new view_node_1.ViewNode(parent, node.name, node.attribs);
            }
            else if (node.type == "text") {
                //viewNode = new ViewNode(parent, "rawtext", {text: node.data});
                //Ignore text nodes
                return;
            }
            else if (node.type == "root") {
                //viewNode = new ViewNode(parent, "root", {});
                //Ignore "root" elements.
                return;
            }
            else {
                console.dump(node);
                throw new Error('Unknown parse node type');
            }
            if (dom_adapter_1.DOM.hasClass(node, util_1.NG_BINDING_CLASS)) {
                boundElements.push(viewNode);
            }
            if (node.children) {
                var children = _this._createNodes(viewNode, node.children, boundElements);
                children.forEach(function (childViewNode, index) {
                    viewNode.insertChildAt(index, childViewNode);
                });
            }
            viewNodes.push(viewNode);
        });
        return viewNodes;
    };
    NativeScriptRenderer = __decorate([
        angular2_1.Injectable(), 
        __metadata('design:paramtypes', [template_cloner_1.TemplateCloner])
    ], NativeScriptRenderer);
    return NativeScriptRenderer;
})(api_1.Renderer);
exports.NativeScriptRenderer = NativeScriptRenderer;
//# sourceMappingURL=renderer.js.map