var content_view_1 = require('ui/content-view');
var special_properties_1 = require("ui/builder/special-properties");
var frame_1 = require('ui/frame');
var button_1 = require('ui/button');
var stack_layout_1 = require('ui/layouts/stack-layout');
var dock_layout_1 = require('ui/layouts/dock-layout');
var label_1 = require('ui/label');
var text_field_1 = require('ui/text-field');
var text_view_1 = require('ui/text-view');
var switch_1 = require('ui/switch');
var layout_1 = require('ui/layouts/layout');
var gestures = require("ui/gestures");
var ViewNode = (function () {
    function ViewNode(parentNode, viewName, attributes) {
        if (attributes === void 0) { attributes = {}; }
        this.parentNode = parentNode;
        this.viewName = viewName;
        this.attributes = attributes;
        this.eventListeners = new Map();
        this._attachedToView = false;
        this.cssClasses = new Map();
        this.children = [];
        if (this.parentNode)
            this.parentNode.children.push(this);
    }
    ViewNode.prototype.print = function (depth) {
        if (depth === void 0) { depth = 0; }
        var line = "";
        for (var i = 0; i < depth; i++)
            line += "    ";
        console.log(line + this.viewName + '(' + this._attachedToView + ') ');
        this.children.forEach(function (child) {
            child.print(depth + 1);
        });
    };
    ViewNode.prototype.printTree = function () {
        var root = this;
        while (root.parentNode !== null) {
            root = root.parentNode;
        }
        root.print();
    };
    Object.defineProperty(ViewNode.prototype, "parentNativeView", {
        get: function () {
            if (this._parentView)
                return this._parentView;
            if (this.parentNode) {
                if (this.parentNode.viewName !== "template" && this.parentNode.nativeView) {
                    this._parentView = this.parentNode.nativeView;
                }
                else {
                    this._parentView = this.parentNode.parentNativeView;
                }
            }
            if (!this._parentView) {
                this._parentView = frame_1.topmost().currentPage;
            }
            return this._parentView;
        },
        enumerable: true,
        configurable: true
    });
    ViewNode.prototype.attachToView = function (atIndex) {
        if (atIndex === void 0) { atIndex = -1; }
        console.log('ViewNode.attachToView ' + this.viewName);
        if (this._attachedToView) {
            console.log('already attached.');
            return;
        }
        this._attachedToView = true;
        this.createUI(atIndex);
        this.children.forEach(function (child) {
            child.attachToView();
        });
    };
    ViewNode.prototype.getViewClass = function () {
        return ViewNode.allowedElements.get(this.viewName);
    };
    ViewNode.prototype.createUI = function (attachAtIndex) {
        if (!ViewNode.allowedElements.has(this.viewName))
            return;
        console.log('createUI: ' + this.viewName +
            ', attachAt: ' + attachAtIndex +
            ', parent: ' + this.parentNode.viewName +
            ', parent UI ' + this.parentNativeView.constructor.name);
        var viewClass = this.getViewClass();
        if (!this.nativeView) {
            this.nativeView = new viewClass();
        }
        else {
            console.log('Reattaching old view: ' + this.viewName);
        }
        this.configureUI();
        if (this.parentNativeView instanceof layout_1.Layout) {
            var parentLayout = this.parentNativeView;
            if (attachAtIndex != -1) {
                console.log('Layout.insertChild');
                var indexOffset = 0;
                if (this.parentNode.viewName === "template") {
                    indexOffset = parentLayout.getChildIndex(this.parentNode.nativeView);
                }
                parentLayout.insertChild(this.nativeView, indexOffset + attachAtIndex);
            }
            else {
                parentLayout.addChild(this.nativeView);
            }
            this.attachUIEvents();
        }
        else if (this.parentNativeView._addChildFromBuilder) {
            this.parentNativeView._addChildFromBuilder(this.viewName, this.nativeView);
            this.attachUIEvents();
        }
        else {
            throw new Error("Parent view can't have children! " + this._parentView);
        }
    };
    ViewNode.getProperties = function (instance) {
        var type = instance && instance.constructor;
        if (!type) {
            return new Map();
        }
        if (!ViewNode.propertyMaps.has(type)) {
            var propMap = new Map();
            for (var propName in instance) {
                propMap.set(propName.toLowerCase(), propName);
            }
            ViewNode.propertyMaps.set(type, propMap);
        }
        return ViewNode.propertyMaps.get(type);
    };
    ViewNode.prototype.configureUI = function () {
        if (!this.attributes)
            return;
        for (var attribute in this.attributes) {
            var propertyValue = this.attributes[attribute];
            this.setAttribute(attribute, propertyValue);
        }
        this.syncClasses();
    };
    ViewNode.prototype.setAttribute = function (attributeName, value) {
        console.log('Setting attribute: ' + attributeName);
        var specialSetter = special_properties_1.getSpecialPropertySetter(attributeName);
        var propMap = ViewNode.getProperties(this.nativeView);
        if (attributeName === "class") {
            this.setClasses(value);
        }
        else if (specialSetter) {
            specialSetter(this.nativeView, value);
        }
        else if (propMap.has(attributeName)) {
            // We have a lower-upper case mapped property.
            var propertyName = propMap.get(attributeName);
            this.nativeView[propertyName] = value;
        }
        else {
            // Unknown attribute value -- just set it to our object as is.
            this.nativeView[attributeName] = value;
        }
    };
    ViewNode.prototype.attachUIEvents = function () {
        var _this = this;
        console.log('ViewNode.attachUIEvents: ' + this.viewName + ' ' + this.eventListeners.size);
        this.eventListeners.forEach(function (callback, eventName) {
            _this.attachNativeEvent(eventName, callback);
        });
    };
    ViewNode.prototype.resolveNativeEvent = function (parsedEventName) {
        //TODO: actually resolve the event...
        return parsedEventName;
    };
    ViewNode.prototype.isGesture = function (eventName) {
        return gestures.fromString(name.toLowerCase()) !== undefined;
    };
    ViewNode.prototype.attachNativeEvent = function (eventName, callback) {
        console.log('attachNativeEvent ' + eventName);
        // Try to resolve the event as a gesture name first.
        // Attach as event otherwise.
        var gestureName = gestures.fromString(eventName.toLowerCase());
        if (gestureName) {
            this.nativeView.observe(gestureName, callback);
        }
        else {
            var resolvedEvent = this.resolveNativeEvent(eventName);
            this.nativeView.addEventListener(resolvedEvent, callback);
        }
    };
    ViewNode.prototype.createEventListener = function (view, bindingIndex, eventName, eventLocals) {
        var _this = this;
        console.log('createEventListener ' + this.viewName + ' ' + eventName + ' ' + eventLocals);
        var handler = function (args) {
            var locals = new Map();
            locals.set('$event', args);
            //TODO: remove -- used for debug prints triggered from outside the renderer code.
            locals.set('$el', _this);
            view.eventDispatcher.dispatchRenderEvent(bindingIndex, eventName, locals);
        };
        var zonedHandler = global.zone.bind(handler);
        this.eventListeners.set(eventName, zonedHandler);
        if (this._attachedToView) {
            this.attachNativeEvent(eventName, zonedHandler);
        }
    };
    ViewNode.prototype.insertChildAt = function (index, childNode) {
        console.log('ViewNode.insertChildAt: ' + this.viewName + ' ' + index + ' ' + childNode.viewName);
        if (childNode.parentNode) {
            console.log('Moving child to new parent');
            childNode.parentNode.removeChild(childNode);
        }
        this.children.splice(index, 0, childNode);
        childNode.parentNode = this;
    };
    ViewNode.prototype.removeChild = function (childNode) {
        childNode.parentNode = null;
        childNode._parentView = null;
        childNode._attachedToView = false;
        this.children = this.children.filter(function (item) { return item !== childNode; });
        if (childNode.nativeView) {
            var nativeParent = childNode.nativeView.parent;
            if (nativeParent instanceof layout_1.Layout) {
                nativeParent.removeChild(childNode.nativeView);
            }
            else {
                nativeParent._removeView(childNode.nativeView);
            }
        }
    };
    ViewNode.prototype.getChildIndex = function (childNode) {
        return this.children.indexOf(childNode);
    };
    ViewNode.prototype.setProperty = function (name, value) {
        console.log('ViewNode.setProperty ' + this.viewName + ' setProperty ' + name + ' ' + value);
        if (this.nativeView) {
            this.setAttribute(name, value);
        }
        else {
            console.log('setProperty called without a nativeView');
        }
    };
    ViewNode.prototype.addClass = function (className) {
        this.cssClasses.set(className, true);
        this.syncClasses();
    };
    ViewNode.prototype.removeClass = function (className) {
        this.cssClasses.delete(className);
        this.syncClasses();
    };
    ViewNode.prototype.setClasses = function (classesValue) {
        var _this = this;
        var classes = classesValue.split(ViewNode.whiteSpaceSplitter);
        classes.forEach(function (className) { return _this.cssClasses.set(className, true); });
        this.syncClasses();
    };
    ViewNode.prototype.syncClasses = function () {
        var classValue = Array.from(this.cssClasses.keys()).join(' ');
        if (this.nativeView && classValue) {
            this.nativeView.cssClass = classValue;
        }
    };
    //TODO: move element registration and imports to a new module
    ViewNode.allowedElements = new Map([
        ["button", button_1.Button],
        ["stacklayout", stack_layout_1.StackLayout],
        ["docklayout", dock_layout_1.DockLayout],
        ["textfield", text_field_1.TextField],
        ["textview", text_view_1.TextView],
        ["label", label_1.Label],
        ["switch", switch_1.Switch],
        ["template", content_view_1.ContentView],
    ]);
    ViewNode.whiteSpaceSplitter = /\s+/;
    ViewNode.propertyMaps = new Map();
    return ViewNode;
})();
exports.ViewNode = ViewNode;
//# sourceMappingURL=view_node.js.map